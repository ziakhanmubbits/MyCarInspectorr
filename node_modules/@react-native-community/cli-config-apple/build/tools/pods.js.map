{"version":3,"names":["getPackageJson","root","require","path","join","CLIError","getPlatformDependencies","dependencies","platformName","Object","keys","filter","dependency","platforms","map","version","sort","dependenciesToString","generateMd5Hash","text","createHash","update","digest","compareMd5Hashes","hash1","hash2","getChecksum","podfileLockPath","file","fs","readFileSync","checksumLine","split","find","line","includes","undefined","install","packageJson","cachedDependenciesHash","currentDependenciesHash","iosFolderPath","platform","reactNativePath","loader","getLoader","runCodegen","installPods","skipBundleInstall","cacheManager","set","name","succeed","error","fail","chalk","bold","resolvePods","sourceDir","nativeDependencies","options","podfilePath","platformFolderPath","slice","lastIndexOf","podsPath","arePodsInstalled","existsSync","platformDependencies","dependenciesString","currentPodfileHash","currentPodfileLockChecksum","cachedPodfileHash","get","cachedPodfileLockChecksum","forceInstall","newArchEnabled"],"sources":["../../src/tools/pods.ts"],"sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport {createHash} from 'crypto';\nimport chalk from 'chalk';\nimport {\n  CLIError,\n  cacheManager,\n  getLoader,\n} from '@react-native-community/cli-tools';\nimport installPods from './installPods';\nimport {\n  DependencyConfig,\n  IOSDependencyConfig,\n} from '@react-native-community/cli-types';\nimport {ApplePlatform} from '../types';\nimport runCodegen from './runCodegen';\n\ninterface ResolvePodsOptions {\n  forceInstall?: boolean;\n  newArchEnabled?: boolean;\n}\n\ninterface NativeDependencies {\n  [key: string]: DependencyConfig;\n}\n\nfunction getPackageJson(root: string) {\n  try {\n    return require(path.join(root, 'package.json'));\n  } catch {\n    throw new CLIError(\n      'No package.json found. Please make sure the file exists in the current folder.',\n    );\n  }\n}\n\nexport function getPlatformDependencies(\n  dependencies: NativeDependencies,\n  platformName: ApplePlatform,\n) {\n  return Object.keys(dependencies)\n    .filter((dependency) => dependencies[dependency].platforms?.[platformName])\n    .map(\n      (dependency) =>\n        `${dependency}@${\n          (\n            dependencies[dependency].platforms?.[\n              platformName\n            ] as IOSDependencyConfig\n          ).version\n        }`,\n    )\n    .sort();\n}\n\nexport function dependenciesToString(dependencies: string[]) {\n  return dependencies.join('\\n');\n}\n\nexport function generateMd5Hash(text: string) {\n  return createHash('md5').update(text).digest('hex');\n}\n\nexport function compareMd5Hashes(hash1?: string, hash2?: string) {\n  return hash1 === hash2;\n}\n\nasync function getChecksum(\n  podfileLockPath: string,\n): Promise<string | undefined> {\n  try {\n    const file = fs.readFileSync(podfileLockPath, 'utf8');\n\n    const checksumLine = file\n      .split('\\n')\n      .find((line) => line.includes('PODFILE CHECKSUM'));\n\n    if (checksumLine) {\n      return checksumLine.split(': ')[1];\n    }\n\n    return undefined;\n  } catch {\n    return undefined;\n  }\n}\n\nasync function install(\n  packageJson: Record<string, any>,\n  cachedDependenciesHash: string | undefined,\n  currentDependenciesHash: string,\n  iosFolderPath: string,\n  platform: string,\n  root: string,\n  reactNativePath: string,\n) {\n  const loader = getLoader('Installing CocoaPods...');\n  try {\n    await runCodegen({\n      root,\n      platform,\n      reactNativePath,\n      iosFolderPath,\n    });\n    await installPods(loader, {\n      skipBundleInstall: !!cachedDependenciesHash,\n      iosFolderPath,\n    });\n    cacheManager.set(packageJson.name, 'dependencies', currentDependenciesHash);\n    loader.succeed();\n  } catch (error) {\n    loader.fail();\n    throw new CLIError(\n      `Something went wrong while installing CocoaPods. Please run ${chalk.bold(\n        'pod install',\n      )} manually`,\n      error as Error,\n    );\n  }\n}\n\nexport default async function resolvePods(\n  root: string,\n  sourceDir: string,\n  nativeDependencies: NativeDependencies,\n  platformName: ApplePlatform,\n  reactNativePath: string,\n  options?: ResolvePodsOptions,\n) {\n  const packageJson = getPackageJson(root);\n  const podfilePath = path.join(sourceDir, 'Podfile'); // sourceDir is calculated based on Podfile location, see getProjectConfig()\n\n  const podfileLockPath = path.join(sourceDir, 'Podfile.lock');\n  const platformFolderPath = podfilePath\n    ? podfilePath.slice(0, podfilePath.lastIndexOf('/'))\n    : path.join(root, platformName);\n  const podsPath = path.join(platformFolderPath, 'Pods');\n  const arePodsInstalled = fs.existsSync(podsPath);\n  const platformDependencies = getPlatformDependencies(\n    nativeDependencies,\n    platformName,\n  );\n  const dependenciesString = dependenciesToString(platformDependencies);\n  const currentDependenciesHash = generateMd5Hash(dependenciesString);\n  // Users can manually add dependencies to Podfile, so we can't entirely rely on `dependencies` from `config`'s output.\n  const currentPodfileHash = generateMd5Hash(\n    fs.readFileSync(podfilePath, 'utf8'),\n  );\n  let currentPodfileLockChecksum = await getChecksum(podfileLockPath);\n\n  const cachedPodfileHash = cacheManager.get(packageJson.name, 'podfile');\n  const cachedPodfileLockChecksum = cacheManager.get(\n    packageJson.name,\n    'podfileLock',\n  );\n\n  const cachedDependenciesHash = cacheManager.get(\n    packageJson.name,\n    'dependencies',\n  );\n\n  if (options?.forceInstall) {\n    await install(\n      packageJson,\n      cachedDependenciesHash,\n      currentDependenciesHash,\n      platformFolderPath,\n      platformName,\n      root,\n      reactNativePath,\n    );\n  } else if (\n    arePodsInstalled &&\n    compareMd5Hashes(currentDependenciesHash, cachedDependenciesHash) &&\n    compareMd5Hashes(currentPodfileHash, cachedPodfileHash) &&\n    compareMd5Hashes(currentPodfileLockChecksum, cachedPodfileLockChecksum)\n  ) {\n    cacheManager.set(packageJson.name, 'dependencies', currentDependenciesHash);\n    cacheManager.set(packageJson.name, 'podfile', currentPodfileHash);\n    cacheManager.set(\n      packageJson.name,\n      'podfileLock',\n      currentPodfileLockChecksum ?? '',\n    );\n  } else {\n    const loader = getLoader('Installing CocoaPods...');\n    try {\n      await installPods(loader, {\n        skipBundleInstall: !!cachedDependenciesHash,\n        newArchEnabled: options?.newArchEnabled,\n        iosFolderPath: platformFolderPath,\n      });\n      cacheManager.set(\n        packageJson.name,\n        'dependencies',\n        currentDependenciesHash,\n      );\n      cacheManager.set(packageJson.name, 'podfile', currentPodfileHash);\n      // We need to read again the checksum because value changed after running `pod install`\n      currentPodfileLockChecksum = await getChecksum(podfileLockPath);\n      cacheManager.set(\n        packageJson.name,\n        'podfileLock',\n        currentPodfileLockChecksum ?? '',\n      );\n      loader.succeed();\n    } catch (error) {\n      loader.fail();\n      throw new CLIError(\n        `Something went wrong while installing CocoaPods. Please run ${chalk.bold(\n          'pod install',\n        )} manually`,\n        error as Error,\n      );\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKA;AAMA;AAAsC;AAWtC,SAASA,cAAc,CAACC,IAAY,EAAE;EACpC,IAAI;IACF,OAAOC,OAAO,CAACC,eAAI,CAACC,IAAI,CAACH,IAAI,EAAE,cAAc,CAAC,CAAC;EACjD,CAAC,CAAC,MAAM;IACN,MAAM,KAAII,oBAAQ,EAChB,gFAAgF,CACjF;EACH;AACF;AAEO,SAASC,uBAAuB,CACrCC,YAAgC,EAChCC,YAA2B,EAC3B;EACA,OAAOC,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC,CAC7BI,MAAM,CAAEC,UAAU;IAAA;IAAA,gCAAKL,YAAY,CAACK,UAAU,CAAC,CAACC,SAAS,0DAAlC,sBAAqCL,YAAY,CAAC;EAAA,EAAC,CAC1EM,GAAG,CACDF,UAAU;IAAA;IAAA,OACR,GAAEA,UAAW,IACZ,2BACEL,YAAY,CAACK,UAAU,CAAC,CAACC,SAAS,2DAAlC,uBACEL,YAAY,CACb,EACDO,OACH,EAAC;EAAA,EACL,CACAC,IAAI,EAAE;AACX;AAEO,SAASC,oBAAoB,CAACV,YAAsB,EAAE;EAC3D,OAAOA,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC;AAChC;AAEO,SAASc,eAAe,CAACC,IAAY,EAAE;EAC5C,OAAO,IAAAC,oBAAU,EAAC,KAAK,CAAC,CAACC,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,CAAC,KAAK,CAAC;AACrD;AAEO,SAASC,gBAAgB,CAACC,KAAc,EAAEC,KAAc,EAAE;EAC/D,OAAOD,KAAK,KAAKC,KAAK;AACxB;AAEA,eAAeC,WAAW,CACxBC,eAAuB,EACM;EAC7B,IAAI;IACF,MAAMC,IAAI,GAAGC,kBAAE,CAACC,YAAY,CAACH,eAAe,EAAE,MAAM,CAAC;IAErD,MAAMI,YAAY,GAAGH,IAAI,CACtBI,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IAEpD,IAAIJ,YAAY,EAAE;MAChB,OAAOA,YAAY,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC;IAEA,OAAOI,SAAS;EAClB,CAAC,CAAC,MAAM;IACN,OAAOA,SAAS;EAClB;AACF;AAEA,eAAeC,OAAO,CACpBC,WAAgC,EAChCC,sBAA0C,EAC1CC,uBAA+B,EAC/BC,aAAqB,EACrBC,QAAgB,EAChBzC,IAAY,EACZ0C,eAAuB,EACvB;EACA,MAAMC,MAAM,GAAG,IAAAC,qBAAS,EAAC,yBAAyB,CAAC;EACnD,IAAI;IACF,MAAM,IAAAC,mBAAU,EAAC;MACf7C,IAAI;MACJyC,QAAQ;MACRC,eAAe;MACfF;IACF,CAAC,CAAC;IACF,MAAM,IAAAM,oBAAW,EAACH,MAAM,EAAE;MACxBI,iBAAiB,EAAE,CAAC,CAACT,sBAAsB;MAC3CE;IACF,CAAC,CAAC;IACFQ,wBAAY,CAACC,GAAG,CAACZ,WAAW,CAACa,IAAI,EAAE,cAAc,EAAEX,uBAAuB,CAAC;IAC3EI,MAAM,CAACQ,OAAO,EAAE;EAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,MAAM,CAACU,IAAI,EAAE;IACb,MAAM,KAAIjD,oBAAQ,EACf,+DAA8DkD,gBAAK,CAACC,IAAI,CACvE,aAAa,CACb,WAAU,EACZH,KAAK,CACN;EACH;AACF;AAEe,eAAeI,WAAW,CACvCxD,IAAY,EACZyD,SAAiB,EACjBC,kBAAsC,EACtCnD,YAA2B,EAC3BmC,eAAuB,EACvBiB,OAA4B,EAC5B;EACA,MAAMtB,WAAW,GAAGtC,cAAc,CAACC,IAAI,CAAC;EACxC,MAAM4D,WAAW,GAAG1D,eAAI,CAACC,IAAI,CAACsD,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;;EAErD,MAAM/B,eAAe,GAAGxB,eAAI,CAACC,IAAI,CAACsD,SAAS,EAAE,cAAc,CAAC;EAC5D,MAAMI,kBAAkB,GAAGD,WAAW,GAClCA,WAAW,CAACE,KAAK,CAAC,CAAC,EAAEF,WAAW,CAACG,WAAW,CAAC,GAAG,CAAC,CAAC,GAClD7D,eAAI,CAACC,IAAI,CAACH,IAAI,EAAEO,YAAY,CAAC;EACjC,MAAMyD,QAAQ,GAAG9D,eAAI,CAACC,IAAI,CAAC0D,kBAAkB,EAAE,MAAM,CAAC;EACtD,MAAMI,gBAAgB,GAAGrC,kBAAE,CAACsC,UAAU,CAACF,QAAQ,CAAC;EAChD,MAAMG,oBAAoB,GAAG9D,uBAAuB,CAClDqD,kBAAkB,EAClBnD,YAAY,CACb;EACD,MAAM6D,kBAAkB,GAAGpD,oBAAoB,CAACmD,oBAAoB,CAAC;EACrE,MAAM5B,uBAAuB,GAAGtB,eAAe,CAACmD,kBAAkB,CAAC;EACnE;EACA,MAAMC,kBAAkB,GAAGpD,eAAe,CACxCW,kBAAE,CAACC,YAAY,CAAC+B,WAAW,EAAE,MAAM,CAAC,CACrC;EACD,IAAIU,0BAA0B,GAAG,MAAM7C,WAAW,CAACC,eAAe,CAAC;EAEnE,MAAM6C,iBAAiB,GAAGvB,wBAAY,CAACwB,GAAG,CAACnC,WAAW,CAACa,IAAI,EAAE,SAAS,CAAC;EACvE,MAAMuB,yBAAyB,GAAGzB,wBAAY,CAACwB,GAAG,CAChDnC,WAAW,CAACa,IAAI,EAChB,aAAa,CACd;EAED,MAAMZ,sBAAsB,GAAGU,wBAAY,CAACwB,GAAG,CAC7CnC,WAAW,CAACa,IAAI,EAChB,cAAc,CACf;EAED,IAAIS,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEe,YAAY,EAAE;IACzB,MAAMtC,OAAO,CACXC,WAAW,EACXC,sBAAsB,EACtBC,uBAAuB,EACvBsB,kBAAkB,EAClBtD,YAAY,EACZP,IAAI,EACJ0C,eAAe,CAChB;EACH,CAAC,MAAM,IACLuB,gBAAgB,IAChB3C,gBAAgB,CAACiB,uBAAuB,EAAED,sBAAsB,CAAC,IACjEhB,gBAAgB,CAAC+C,kBAAkB,EAAEE,iBAAiB,CAAC,IACvDjD,gBAAgB,CAACgD,0BAA0B,EAAEG,yBAAyB,CAAC,EACvE;IACAzB,wBAAY,CAACC,GAAG,CAACZ,WAAW,CAACa,IAAI,EAAE,cAAc,EAAEX,uBAAuB,CAAC;IAC3ES,wBAAY,CAACC,GAAG,CAACZ,WAAW,CAACa,IAAI,EAAE,SAAS,EAAEmB,kBAAkB,CAAC;IACjErB,wBAAY,CAACC,GAAG,CACdZ,WAAW,CAACa,IAAI,EAChB,aAAa,EACboB,0BAA0B,IAAI,EAAE,CACjC;EACH,CAAC,MAAM;IACL,MAAM3B,MAAM,GAAG,IAAAC,qBAAS,EAAC,yBAAyB,CAAC;IACnD,IAAI;MACF,MAAM,IAAAE,oBAAW,EAACH,MAAM,EAAE;QACxBI,iBAAiB,EAAE,CAAC,CAACT,sBAAsB;QAC3CqC,cAAc,EAAEhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgB,cAAc;QACvCnC,aAAa,EAAEqB;MACjB,CAAC,CAAC;MACFb,wBAAY,CAACC,GAAG,CACdZ,WAAW,CAACa,IAAI,EAChB,cAAc,EACdX,uBAAuB,CACxB;MACDS,wBAAY,CAACC,GAAG,CAACZ,WAAW,CAACa,IAAI,EAAE,SAAS,EAAEmB,kBAAkB,CAAC;MACjE;MACAC,0BAA0B,GAAG,MAAM7C,WAAW,CAACC,eAAe,CAAC;MAC/DsB,wBAAY,CAACC,GAAG,CACdZ,WAAW,CAACa,IAAI,EAChB,aAAa,EACboB,0BAA0B,IAAI,EAAE,CACjC;MACD3B,MAAM,CAACQ,OAAO,EAAE;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdT,MAAM,CAACU,IAAI,EAAE;MACb,MAAM,KAAIjD,oBAAQ,EACf,+DAA8DkD,gBAAK,CAACC,IAAI,CACvE,aAAa,CACb,WAAU,EACZH,KAAK,CACN;IACH;EACF;AACF"}